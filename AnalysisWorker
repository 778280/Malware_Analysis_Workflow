#!/usr/bin/python3.8

# Workflow components imports
from Analyzer import Analyzer, AnalyzerMode

# Utility imports
import argparse
import time
import sys
from multiprocessing import Process, Value

# RPC comunication imports
import xmlrpc.server as srv
import xmlrpc.client as cli


def Serve(ip, port, master_addr, exited):

	try:

		with srv.SimpleXMLRPCServer((ip, port)) as worker:
			
			analyzer = Analyzer(AnalyzerMode.Remote, master_addr)
		
			worker.register_instance(analyzer)
			worker.register_introspection_functions()
		
			worker.serve_forever()
			
	except KeyboardInterrupt:
	
		pass
			
	except Exception as e:
	
		print(repr(e))
		
	finally:
	
		exited.value= True

	
def main(args):

	master_addr = "http://{0}:{1}/".format(args.master_ip, args.master_port)

	master = cli.ServerProxy(master_addr)
	WorkerService = None
	
	try:
		master.system.listMethods()
		
		serve_exited = Value('b', False)
		
		WorkerService = Process(target=Serve, args=(args.ip, args.port, master_addr, serve_exited))
		WorkerService.start()
		
		worker_ID = master.AddAnalysisWorker(args.ip, str(args.port))
		
		while(not serve_exited.value):
	
			master.AnalysisHeartbeat(worker_ID)
		
			time.sleep(60)
			
	except KeyboardInterrupt:
	
		print("\nKeyboard interrupt received, exiting.")
		
		master.DelAnalysisWorker(worker_ID)
		
	except Exception as e:
		
		print(repr(e))
		
	finally:
	
		if WorkerService != None:
			if not serve_exited.value: WorkerService.terminate()
			WorkerService.join()
		sys.exit(0)	


if __name__ == "__main__":

	parser = argparse.ArgumentParser(description="Act as analysis worker for the workflow")
	parser.add_argument("--ip", help="Address in which to serve remote petitions", required=True, default=None, type=str)
	parser.add_argument("--port", help="Port in which to serve remote petitions", required=True, default=None, type=int)
	parser.add_argument("--master_ip", help="Master's IP address", required=True, default=None, type=str)
	parser.add_argument("--master_port", help="Master's port", required=True, default=None, type=int)


	args = parser.parse_args()
	
	if(args.ip != "localhost"):

		main(args)
		
	else:
	
		print("--ip parameter cannot be 'localhost'")
