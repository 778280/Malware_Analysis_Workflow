#!/usr/bin/python3.8

# Utility imports
import pyminizip as pyzip
import tempfile
import argparse
import shutil
import os
import re

#########################################################
#														#
#						Main Code						#
#														#
#########################################################

def main(args):

	possitive	= 0
	analyzed 	= 0
	success		= 0
	failure		= 0
	noLogs		= 0
	samples 	= []
	run			= []
	
	dirPath = os.path.abspath(args.resultsDir)

	for zipFile in os.listdir(dirPath):
	
		analyzed += 1
	
		tmpDir = tempfile.mkdtemp()
	
		pyzip.uncompress(os.path.join(dirPath, zipFile), "ASEPs", tmpDir, 0)
		
		labelingLog = os.path.join(tmpDir, 'labeling.log')
		drakrunLog 	= os.path.join(tmpDir, 'drakrun.log')
		syscallLog 	= os.path.join(tmpDir, 'syscall.log')
		sampleID	= os.path.splitext(zipFile)[0]
		
		
		if os.path.exists(labelingLog):
		
			success += 1
			
			content = open(labelingLog, 'r').read()
			
			possitives = list(re.findall(r'[a-zA-Z0-9 ]+: POSITIVE', content))[1:]
			
			if possitives: 
			
				possitive += 1
				samples.append(sampleID)
				
			content = open(syscallLog, 'r').read()
			
			possitives = list(re.findall(r'^.*Run.*$', content))
			
			if possitives:
			
				run.append(sampleID)
			
		
		elif os.path.exists(drakrunLog):
		
			failure += 1
		
		else:
		
			noLogs += 1
		
		shutil.rmtree(tmpDir)
		
	print("Analyzed {0} samples".format(analyzed))
	print("\t{0} produced no logs".format(noLogs))
	print("\t{0} failed during analysis".format(failure))
	print("\t{0} where successfully analyzed".format(success))
	print("\t\t{0} where labeled with positive use of ASEPs".format(possitive))
	for s in samples:
		print("\t\t\t", s)
		
	for r in run:
		print("\t\t\t\t", r)

#########################################################
#														#
#					Argument Parsing					#
#														#
#########################################################


if __name__ == "__main__":

	parser = argparse.ArgumentParser(description="Analysis result stats")
	parser.add_argument("--resultsDir", help="Directory in which analysis results are stored", required=True)
	
	args = parser.parse_args()

	main(args)
