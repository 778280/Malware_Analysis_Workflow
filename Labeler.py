#################################################################
#																#
# -Project:		Prevalence of Types of ASEPs in Windows malware #
# -File:		Analyzer.py										#
# -Author:		Carlos Borau Gonz√°lez | NIP: 778280				#
# -Description: Manages the parsing of malware sample behavior	#
#					and the labeling of said sample based on	#
#					the results of this process					#
#																#
#################################################################

# Utility imports
import enum
import re

# RPC comunication imports
import xmlrpc.server as srv
import xmlrpc.client as cli

class LabelerMode(enum.Enum):

    Local = 0
    Remote = 1
    

class Labeler:


	def __init__(self, mode, master_addr=None):
	
		if not (mode.name in LabelerMode.__members__):
			print("Labeler mode not known:", mode)
			exit()
			
		self.Mode = mode
		
		if self.Mode == LabelerMode.Remote:
			self.Master = cli.ServerProxy('http://{0}/'.format(master_addr)) 
		
	
	def SubmitLog(self, path):
	
		if self.Mode == LabelerMode.Remote:
			log_f = self.Master.requestFile(path)
		else:
			log_f = open(path, "r")
			
		log = log_f.read()
		
		(Run, RunOnce, RunOnceEx, TrRun, TrRunOnce, TrRunOnceEx) = self._LookForRunKeys(log)
		# TODO _ = self._LookForStartupFolder(log)
		ActiveSetup = self._LookForActiveSetup(log)
		# TODO _ = self._LookForAppInit(log)
		# TODO _ = self._LookForWinlogon(log)
		# TODO _ = self._LookForShotcutManipulation(log)
		# TODO _ = self._LookForImageFileExecOptions(log)


		# TODO return results
		return False
		
	#########################################################
	#														#
	#				Private Parsing Methods					#
	#														#
	#########################################################
	
	
	def _LookForPattern(self, content, pattern):
	
		return re.findall(pattern, content)
		
	def _DeletePattern(self, content, pattern):
	
		return re.sub(pattern, '', content)
		
	def _MatchPattern(self, content, pattern):
	
		return re.match(pattern, content)
		
		
	#########################################################
	#														#
	#				Private Labeling Methods				#
	#														#
	#########################################################
	
	CreatePattern 		= r'\{.*"NtCreateKey".*"ObjectAttributes": "((?:(?:\\\\)?[a-zA-Z0-9 \{\}-]+)*)".*\}'
	SetValuePattern 	= r'\{.*"NtSetValueKey".*"ValueName": "([a-zA-Z0-9 \{\}-]+)".*\}'
	CleanPattern		= r'^\\\\'
	RootRegistryPattern = r'((?:[a-zA-Z0-9 \{\}-]+\\\\)*)([a-zA-Z0-9 \{\}-]+)$'
	GUIDPattern			= r'(\{[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}\})'
	
		#################################################
		#		  System Persistence Mechanisms			#
		#################################################
		
		
			#---------------------------------------#
			#				Run Keys				#
			#---------------------------------------#
			
	RunKeysRunStr 			= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run'
	RunKeysRunOnceStr		= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce'
	RunKeysRunOnceExStr		= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx'
	RunKeysRunOnceEx1Str	= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001'
	
	TerminalRunStr			= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run'
	TerminalRunOnceStr		= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce'
	TerminalRunOnceExStr	= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx'
	TerminalRunOnceEx1Str	= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001'
								
	TitleValueStr			= 'Title'
	FlagsValueStr			= 'Flags'
	
	def _LookForRunKeys(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreatePattern)
		CreateMatches	= [self._DeletePattern(m, self.CleanPattern) for m in CreateMatches]
		
		SetValueMatches = self._LookForPattern(content, self.SetValuePattern)
		
		Run 		= self.RunKeysRunStr in CreateMatches
		RunOnce 	= self.RunKeysRunOnceStr in CreateMatches
		RunOnceEx	= self.RunKeysRunOnceExStr in CreateMatches and \
					  self.RunKeysRunOnceEx1Str in CreateMatches and \
					  self.TitleValueStr in SetValueMatches and \
					  self.FlagsValueStr in SetValueMatches
		
		TrRun		= self.TerminalRunStr in CreateMatches
		TrRunOnce	= self.TerminalRunOnceStr in CreateMatches
		TrRunOnceEx	= self.TerminalRunOnceExStr in CreateMatches and \
					  self.TerminalRunOnceEx1Str in CreateMatches and \
					  self.TitleValueStr in SetValueMatches and \
					  self.FlagsValueStr in SetValueMatches
		
		return (Run, RunOnce, RunOnceEx, TrRun, TrRunOnce, TrRunOnceEx)
		
		
			#---------------------------------------#
			#			 Startup Folder				#
			#---------------------------------------#
	
	def _LookForStartupFolder(self, content):
	
		# TODO
	
		return False
	
		#################################################
		#		     System Behavior Abuse				#
		#################################################
		
		
			#---------------------------------------#
			#			  Active Setup				#
			#---------------------------------------#
			
	ActiveSetupStr		= 'SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\'
	StubPathValueStr 	= 'StubPath'
		
	def _LookForActiveSetup(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreatePattern)
		CreateMatches	= [self._DeletePattern(m, self.CleanPattern) for m in CreateMatches]
		CreateMatches	= [self._MatchPattern(m, self.RootRegistryPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		
		RootRg , LastRg = zip(*CreateMatches)
		GUIDs			= [l for l in LastRg if self._MatchPattern(l, self.GUIDPattern)]
		
		SetValueMatches = self._LookForPattern(content, self.SetValuePattern)
		
		ActiveSetup = self.ActiveSetupStr in RootRg and GUIDs and \
					  self.StubPathValueStr in SetValueMatches
		
		return ActiveSetup
		
			
			#---------------------------------------#
			#			 	 AppInit				#
			#---------------------------------------#
	
	def _LookForAppInit(self, content):
	
		# TODO
	
		return False
	
			#---------------------------------------#
			#			 	 Winlogon				#
			#---------------------------------------#
	
	def _LookForWinlogon(self, content):
	
		# TODO
	
		return False
	
		#################################################
		#		       Program Loader Abuse				#
		#################################################
		
		
			#---------------------------------------#
			#		  Shortcut Manipulation			#
			#---------------------------------------#
		
	def _LookForShotcutManipulation(self, content):
	
		# TODO
	
		return False
			#---------------------------------------#
			#	  Image File Execution Options		#
			#---------------------------------------#
	
	def _LookForImageFileExecOptions(self, content):
	
		# TODO
	
		return False
