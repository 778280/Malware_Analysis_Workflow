#################################################################
#																#
# -Project:		Prevalence of Types of ASEPs in Windows malware #
# -File:		Analyzer.py										#
# -Author:		Carlos Borau González | NIP: 778280				#
# -Description: Manages the parsing of malware sample behavior	#
#					and the labeling of said sample based on	#
#					the results of this process					#
#																#
#################################################################

# Utility imports
import enum
import re

# RPC comunication imports
import xmlrpc.server as srv
import xmlrpc.client as cli

class LabelerMode(enum.Enum):

    Local = 0
    Remote = 1
    

class Labeler:


	def __init__(self, mode, master_addr=None):
	
		if not (mode.name in LabelerMode.__members__):
			print("Labeler mode not known:", mode)
			exit()
			
		self.Mode = mode
		
		if self.Mode == LabelerMode.Remote:
			self.Master = cli.ServerProxy('http://{0}/'.format(master_addr)) 
		
	
	def SubmitLog(self, path):
	
		if self.Mode == LabelerMode.Remote:
			log = self.Master.RequestFile(path).data.decode("utf-8")
		else:
			log = open(path, "r").read()
		
		(Run, RunOnce, RunOnceEx, TrRun, TrRunOnce, TrRunOnceEx) = self._LookForRunKeys(log)
		(StartupFolderCurUsr, StartupFolderAllUsr) = self._LookForStartupFolder(log)
		ActiveSetup = self._LookForActiveSetup(log)
		(AppInit32, AppInit64) = self._LookForAppInit(log)
		(WinlogonUsrinit, WinlogonShell) = self._LookForWinlogon(log)
		ShortcutManipulation = self._LookForShotcutManipulation(log)
		ImgFileExecOpts = self._LookForImageFileExecOptions(log)
		
		overall = Run or RunOnce or RunOnceEx or TrRun or TrRunOnce or TrRunOnceEx or \
				  StartupFolderCurUsr or StartupFolderAllUsr or ActiveSetup or \
				  AppInit32 or AppInit64 or WinlogonUsrinit or WinlogonShell or \
				  ShortcutManipulation or ImgFileExecOpts
		
		result 	= "ASEPs Labeling Results: "	+ "POSITIVE\n" if overall else "NEGATIVE\n"
		result += "\n-Run Keys:\n"
		result += "\t·Run: POSITIVE\n" if Run else "\t·Run: NEGATIVE\n"
		result += "\t·RunOnce: POSITIVE\n" if RunOnce else "\t·RunOnce: NEGATIVE\n"
		result += "\t·RunOnceEx: POSITIVE\n" if RunOnceEx else "\t·RunOnceEx: NEGATIVE\n"
		result += "\t·Terminal Run: POSITIVE\n" if TrRun else "\t·Terminal Run: NEGATIVE\n"
		result += "\t·Terminal RunOnce: POSITIVE\n" if TrRunOnce else "\t·Terminal RunOnce: NEGATIVE\n"
		result += "\t·Terminal RunOnceEx: POSITIVE\n" if TrRunOnceEx else "\t·Terminal RunOnceEx: NEGATIVE\n"
		
		result += "\n-Startup Folder:\n"
		result += "\t·Single User: POSITIVE\n" if StartupFolderCurUsr else "\t·Single User: NEGATIVE\n"
		result += "\t·All Users: POSITIVE\n" if StartupFolderAllUsr else "\t·All Users: NEGATIVE\n"
		
		result += "\n-Active Setup: POSITIVE\n" if ActiveSetup else "\n-Active Setup: NEGATIVE\n"
		
		result += "\n-AppInit:\n"
		result += "\t·AppInit 32: POSITIVE\n" if AppInit32 else "\t·AppInit 32: NEGATIVE\n"
		result += "\t·AppInit 64: POSITIVE\n" if AppInit64 else "\t·AppInit 64: NEGATIVE\n"
		
		result += "\n-Winlogon:\n"
		result += "\t·Userinit: POSITIVE\n" if WinlogonUsrinit else "\t·Userinit: NEGATIVE\n"
		result += "\t·Shell: POSITIVE\n" if WinlogonShell else "\t·Shell: NEGATIVE\n"
		
		result += "\n-Shortcut Manipulation: POSITIVE\n" if ShortcutManipulation else "\n-Shortcut Manipulation: NEGATIVE\n"
		
		result += "\n-Image File Execution Options: POSITIVE\n" if ImgFileExecOpts else "\n-Image File Execution Options: NEGATIVE\n"
		
		return result
		
	#########################################################
	#														#
	#				Private Parsing Methods					#
	#														#
	#########################################################
	
	
	def _LookForPattern(self, content, pattern):
	
		matches = re.findall(pattern, content)
		return list(dict.fromkeys(matches))
		
	def _DeletePattern(self, content, pattern):
	
		return re.sub(pattern, '', content)
		
	def _MatchPattern(self, content, pattern):
	
		return re.match(pattern, content)
		
		
	#########################################################
	#														#
	#				Private Labeling Methods				#
	#														#
	#########################################################
	
	CreateKeyPattern 	= r'\{.*"NtCreateKey".*"ObjectAttributes": "([^"]+)".*\}'
	OpenKeyPattern		= r'\{.*"NtOpenKey(?:Ex)?".*"ObjectAttributes": "([^"]+)".*\}'
	SetValueKeyPattern 	= r'\{.*"NtSetValueKey".*"ValueName": "([^"]+)".*\}'
	CreateFilePattern	= r'\{.*"NtCreateFile".*"ObjectAttributes": "([^"]+)".*\}'
	RegCleanPattern		= r'^\\\\'
	DirCleanPattern		= r'^\\\\\?\?\\\\'
	RootPattern 		= r'^((?:[^\\]+\\\\)*)([^\\]+)$'
	GUIDPattern			= r'(\{[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}\})'
	UserPattern			= r'C:\\\\Users\\\\([a-zA-Z0-9 ]+)\\\\'
	
	
		#################################################
		#		  System Persistence Mechanisms			#
		#################################################
		
		
			#---------------------------------------#
			#				Run Keys				#
			#---------------------------------------#
			
	RunKeysRunStr 			= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run'
	RunKeysRunOnceStr		= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce'
	RunKeysRunOnceExStr		= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx'
	RunKeysRunOnceEx1Str	= 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001'
	
	TerminalRunStr			= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run'
	TerminalRunOnceStr		= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce'
	TerminalRunOnceExStr	= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx'
	TerminalRunOnceEx1Str	= 'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001'
								
	TitleValueStr			= 'Title'
	FlagsValueStr			= 'Flags'
	
	def _LookForRunKeys(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in CreateMatches]
		
		OpenMatches		= self._LookForPattern(content, self.OpenKeyPattern)
		OpenMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in OpenMatches]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		ValuesPresent 	= self.TitleValueStr in SetValueMatches and \
					      self.FlagsValueStr in SetValueMatches
		
		Run 		= self.RunKeysRunStr in CreateMatches or \
					  self.RunKeysRunStr in OpenMatches
		RunOnce 	= self.RunKeysRunOnceStr in CreateMatches or \
					  self.RunKeysRunOnceStr in OpenMatches
		RunOnceEx	= (self.RunKeysRunOnceExStr in CreateMatches or \
					  self.RunKeysRunOnceExStr in OpenMatches) and \
					  (self.RunKeysRunOnceEx1Str in CreateMatches or \
					  self.RunKeysRunOnceEx1Str in OpenMatches) and \
					  ValuesPresent
		
		TrRun		= self.TerminalRunStr in CreateMatches or \
					  self.TerminalRunStr in OpenMatches
		TrRunOnce	= self.TerminalRunOnceStr in CreateMatches or \
					  self.TerminalRunOnceStr in OpenMatches
		TrRunOnceEx	= (self.TerminalRunOnceExStr in CreateMatches or \
					  self.TerminalRunOnceExStr in OpenMatches) and \
					  (self.TerminalRunOnceEx1Str in CreateMatches or \
					  self.TerminalRunOnceEx1Str in OpenMatches) and \
					  ValuesPresent
		
		return (Run, RunOnce, RunOnceEx, TrRun, TrRunOnce, TrRunOnceEx)
		
		
			#---------------------------------------#
			#			 Startup Folder				#
			#---------------------------------------#
			
	StartupUserStr		= 'C:\\\\Users\\\\{username}\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\'
	StartupAllStr		= 'C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\'
	
	def _LookForStartupFolder(self, content):
	
		Users = list(dict.fromkeys(self._LookForPattern(content, self.UserPattern)))
		UserStartupFolders = [self.StartupUserStr.format(username=u) for u in Users]
		
		CreateMatches 	= self._LookForPattern(content, self.CreateFilePattern)
		CreateMatches	= [self._DeletePattern(m, self.DirCleanPattern) for m in CreateMatches]
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		Dirs , Files = zip(*CreateMatches)
		
		StartupFolderCurUsr = any(item in Dirs for item in UserStartupFolders)
		StartupFolderAllUsr = self.StartupAllStr in Dirs
		
		return (StartupFolderCurUsr, StartupFolderAllUsr)
	
	
	
		#################################################
		#		     System Behavior Abuse				#
		#################################################
		
		
			#---------------------------------------#
			#			  Active Setup				#
			#---------------------------------------#
			
	ActiveSetupStr		= 'SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\'
	StubPathValueStr 	= 'StubPath'
		
	def _LookForActiveSetup(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in CreateMatches]
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		
		RootRg , LastRg = zip(*CreateMatches)
		GUIDs			= [l for l in LastRg if self._MatchPattern(l, self.GUIDPattern)]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		ActiveSetup = self.ActiveSetupStr in RootRg and GUIDs and \
					  self.StubPathValueStr in SetValueMatches
		
		return ActiveSetup
		
			
			#---------------------------------------#
			#			 	 AppInit				#
			#---------------------------------------#
	
	AppInit32Str		= 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows'
	AppInit64Str		= 'SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows'
	AppInitDLLsStr		= 'AppInit_DLLs'
	LoadAppInitDLLsStr	= 'LoadAppInit_DLLs'
	RequiredSignedStr	= 'RequireSignedAppInit_DLLs'
	
	def _LookForAppInit(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in CreateMatches]
		
		OpenMatches		= self._LookForPattern(content, self.OpenKeyPattern)
		OpenMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in OpenMatches]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		ValuesPresent	= self.AppInitDLLsStr in SetValueMatches and \
						  self.LoadAppInitDLLsStr in SetValueMatches and \
						  self.RequiredSignedStr in SetValueMatches
						  
		AppInit32		= (self.AppInit32Str in CreateMatches or \
						  self.AppInit32Str in OpenMatches) and ValuesPresent
		AppInit64		= (self.AppInit64Str in CreateMatches or \
						  self.AppInit64Str in OpenMatches) and ValuesPresent
	
		return (AppInit32, AppInit64)
	
	
			#---------------------------------------#
			#			 	 Winlogon				#
			#---------------------------------------#
			
	WinlogonStr			= 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon'
	UserinitValueStr	= 'Userinit'
	ShellValueStr		= 'Shell'
	
	def _LookForWinlogon(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in CreateMatches]
		
		OpenMatches		= self._LookForPattern(content, self.OpenKeyPattern)
		OpenMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in OpenMatches]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		RegistryPresent = (self.WinlogonStr in CreateMatches or \
						  self.WinlogonStr in OpenMatches)
		
		WinlogonUsrinit = RegistryPresent and self.UserinitValueStr in SetValueMatches
	
		WinlogonShell	= RegistryPresent and self.ShellValueStr in SetValueMatches
						   
		return (WinlogonUsrinit, WinlogonShell)
	
	
	
		#################################################
		#		       Program Loader Abuse				#
		#################################################
		
		
			#---------------------------------------#
			#		  Shortcut Manipulation			#
			#---------------------------------------#
		
	def _LookForShotcutManipulation(self, content):
	
		# TODO Look for patterns of shortcut manipulation
		
		ShortcutManipulation = False
	
		return ShortcutManipulation
		
		
			#---------------------------------------#
			#	  Image File Execution Options		#
			#---------------------------------------#
			
	ImgFileExecOptsStr	= 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\'
	DebuggerValueStr	= 'Debugger'
	
	def _LookForImageFileExecOptions(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._DeletePattern(m, self.RegCleanPattern) for m in CreateMatches]
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		
		OpenMatches 	= self._LookForPattern(content, self.OpenKeyPattern)
		OpenMatches		= [self._DeletePattern(m, self.RegCleanPattern) for m in OpenMatches]
		OpenMatches		= [self._MatchPattern(m, self.RootPattern) for m in OpenMatches]
		OpenMatches		= [m.groups() for m in OpenMatches if m]
		
		CreateRootRegs 	, CreateProgRegs 	= zip(*CreateMatches)
		OpenRootRegs 	, OpenProgRegs 	 	= zip(*OpenMatches)
		
		RootRegistries	= list(set(CreateRootRegs + OpenRootRegs))
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
	
		ImgFileExecOpts = self.ImgFileExecOptsStr in RootRegistries and \
						  self.DebuggerValueStr in SetValueMatches
						  
		return ImgFileExecOpts
