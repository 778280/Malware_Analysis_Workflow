#################################################################
#																#
# -Project:		Prevalence of Types of ASEPs in Windows malware #
# -File:		Analyzer.py										#
# -Author:		Carlos Borau González | NIP: 778280				#
# -Description: Manages the parsing of malware sample behavior	#
#					and the labeling of said sample based on	#
#					the results of this process					#
#																#
#################################################################

# Utility imports
import enum
import re
import os

# RPC comunication imports
import xmlrpc.server as srv
import xmlrpc.client as cli

class LabelerMode(enum.Enum):

    Local = 0
    Remote = 1
    

class Labeler:


	def __init__(self, mode, master_addr=None):
	
		if not (mode.name in LabelerMode.__members__):
			print("Labeler mode not known:", mode)
			exit()
			
		self.Mode = mode
		
		if self.Mode == LabelerMode.Remote:
			self.Master = cli.ServerProxy('http://{0}/'.format(master_addr)) 
		
	
	def SubmitLog(self, path):
	
		if self.Mode == LabelerMode.Remote:
			log = self.Master.RequestFile(path)
			if log != None:
				log = log.data.decode("utf-8")
			else:
				return "ASEPs Labeling Results: Log file not found"
		else:
			if os.path.exists(path):
				log = open(path, "r").read()
			else:
				return "ASEPs Labeling Results: Log file not found"
				
		(Run, RunOnce, RunOnceEx, TrRun, TrRunOnce, TrRunOnceEx) = self._LookForRunKeys(log)
		(StartupFolderCurUsr, StartupFolderAllUsr) = self._LookForStartupFolder(log)
		SchTasks = self._LookForSchTasks(log)
		Services = self._LookForServices(log)
		ActiveSetup = self._LookForActiveSetup(log)
		(AppInit32, AppInit64) = self._LookForAppInit(log)
		(WinlogonUsrinit, WinlogonShell) = self._LookForWinlogon(log)
		ShortcutManipulation = self._LookForShotcutManipulation(log)
		ImgFileExecOpts = self._LookForImageFileExecOptions(log)
		COMHijacking = self._LookForCOMHijacking(log)
		ShimDatabase = self._LookForShimDatabase(log)
		ExtensionHijacking = self._LookForExtensionHijacking(log)
		BrowserHelperObjects = self._LookForBrowserHelperObjects(log)
		OfficeAddins = self._LookForOfficeAddins(log)
		
		overall = Run or RunOnce or RunOnceEx or TrRun or TrRunOnce or TrRunOnceEx or \
				  StartupFolderCurUsr or StartupFolderAllUsr or SchTasks or Services or \
				  ActiveSetup or AppInit32 or AppInit64 or WinlogonUsrinit or WinlogonShell or \
				  ShortcutManipulation or ImgFileExecOpts or COMHijacking or ShimDatabase or \
				  ExtensionHijacking or BrowserHelperObjects or OfficeAddins
		
		result 	= "ASEPs Labeling Results: POSITIVE\n" if overall else "ASEPs Labeling Results: NEGATIVE\n"
		result += "\n-Run Keys:\n"
		result += "\t·Run: POSITIVE\n" if Run else "\t·Run: NEGATIVE\n"
		result += "\t·RunOnce: POSITIVE\n" if RunOnce else "\t·RunOnce: NEGATIVE\n"
		result += "\t·RunOnceEx: POSITIVE\n" if RunOnceEx else "\t·RunOnceEx: NEGATIVE\n"
		result += "\t·Terminal Run: POSITIVE\n" if TrRun else "\t·Terminal Run: NEGATIVE\n"
		result += "\t·Terminal RunOnce: POSITIVE\n" if TrRunOnce else "\t·Terminal RunOnce: NEGATIVE\n"
		result += "\t·Terminal RunOnceEx: POSITIVE\n" if TrRunOnceEx else "\t·Terminal RunOnceEx: NEGATIVE\n"
		
		result += "\n-Startup Folder:\n"
		result += "\t·Single User: POSITIVE\n" if StartupFolderCurUsr else "\t·Single User: NEGATIVE\n"
		result += "\t·All Users: POSITIVE\n" if StartupFolderAllUsr else "\t·All Users: NEGATIVE\n"
		
		result += "\n-Scheduled Tasks: POSITIVE\n" if SchTasks else "\n-Scheduled Tasks: NEGATIVE\n"

		result += "\n-Services: POSITIVE\n" if Services else "\n-Services: NEGATIVE\n"
		
		result += "\n-Active Setup: POSITIVE\n" if ActiveSetup else "\n-Active Setup: NEGATIVE\n"
		
		result += "\n-AppInit:\n"
		result += "\t·AppInit 32: POSITIVE\n" if AppInit32 else "\t·AppInit 32: NEGATIVE\n"
		result += "\t·AppInit 64: POSITIVE\n" if AppInit64 else "\t·AppInit 64: NEGATIVE\n"
		
		result += "\n-Winlogon:\n"
		result += "\t·Userinit: POSITIVE\n" if WinlogonUsrinit else "\t·Userinit: NEGATIVE\n"
		result += "\t·Shell: POSITIVE\n" if WinlogonShell else "\t·Shell: NEGATIVE\n"
		
		result += "\n-Shortcut Manipulation: POSITIVE\n" if ShortcutManipulation else "\n-Shortcut Manipulation: NEGATIVE\n"
		
		result += "\n-Image File Execution Options: POSITIVE\n" if ImgFileExecOpts else "\n-Image File Execution Options: NEGATIVE\n"
		
		result += "\n-COM Hijacking: POSITIVE\n" if COMHijacking else "\n-COM Hijacking: NEGATIVE\n"
		
		result += "\n-Shim Database: POSITIVE\n" if ShimDatabase else "\n-Shim Database: NEGATIVE\n"
		
		result += "\n-Extension Hijacking: POSITIVE\n" if ExtensionHijacking else "\n-Extension Hijacking: NEGATIVE\n"
		
		result += "\n-Browser Helper Objects: POSITIVE\n" if BrowserHelperObjects else "\n-Browser Helper Objects: NEGATIVE\n"
		
		result += "\n-Office Addins: POSITIVE\n" if OfficeAddins else "\n-Office Addins: NEGATIVE\n"
		
		return result
		
	#########################################################
	#														#
	#				Private Parsing Methods					#
	#														#
	#########################################################
	
	
	def _LookForPattern(self, content, pattern):
	
		matches = re.findall(pattern, content)
		return list(dict.fromkeys(matches))
		
	def _DeletePattern(self, content, pattern):
	
		return re.sub(pattern, '', content)
		
	def _MatchPattern(self, content, pattern):
	
		return re.match(pattern, content)
		
		
	#########################################################
	#														#
	#				Private Labeling Methods				#
	#														#
	#########################################################
	
	CreateKeyPattern 	= r'\{.*"NtCreateKey".*"ObjectAttributes": "([^"]+)".*\}'
	OpenKeyPattern		= r'\{.*"NtOpenKey(?:Ex)?".*"ObjectAttributes": "([^"]+)".*\}'
	OpenKeyProcPattern	= r'\{.*"ProcessName": "([^"]+)".*"NtOpenKey(?:Ex)?".*"ObjectAttributes": "([^"]+)".*\}'
	SetValueKeyPattern 	= r'\{.*"NtSetValueKey".*"ValueName": "([^"]+)".*\}'
	CreateFilePattern	= r'\{.*"NtCreateFile".*"ObjectAttributes": "([^"]+)".*\}'
	ReadFilePattern		= r'\{.*"NtReadFile".*"FileHandle": "([^"]+)".*\}'
	WriteFilePattern	= r'\{.*"NtWriteFile".*"FileHandle": "([^"]+)".*\}'
	QueryInfFilePattern	= r'\{.*"NtQueryInformationFile".*"FileHandle": "([^"]+)".*\}'
	QueryAttFilePattern	= r'\{.*"NtQueryAttributesFile".*"ObjectAttributes": "([^"]+)".*\}'
	DirCleanPattern		= r'^\\\\\?\?\\\\'
	DiskCleanPattern	= r'^[A-Z]:'
	RootPattern 		= r'^((?:\\\\)?(?:[^\\]+\\\\)*)([^\\]+)$'
	GUIDPattern			= r'(\{[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}\})'
	UserPattern			= r'C:\\\\Users\\\\([a-zA-Z0-9 ]+)\\\\'
	PointerPattern		= r'0x[0-9A-Fa-f]{1,16}'
	
	
	CommonProcesses		= ['SearchFilterHost.exe', 'svchost.exe', 'csrss.exe', 'SearchProtocolHost.exe', 'conhost.exe', 'taskhost.exe', 'explorer.exe', 'lsass.exe', 'dllhost.exe', 'SearchIndexer.exe']
	
	
		#################################################
		#		  System Persistence Mechanisms			#
		#################################################
		
		
			#---------------------------------------#
			#				Run Keys				#
			#---------------------------------------#
			
	RunKeysRunStr 			= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?(?:Machine|User)\\\\)?Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run$'
	RunKeysRunOnceStr		= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?(?:Machine|User)\\\\)?Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce$'
	RunKeysRunOnceExStr		= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?(?:Machine|User)\\\\)?Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx$'
	RunKeysRunOnceEx1Str	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?(?:Machine|User)\\\\)?Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001$'
	
	TerminalRunStr			= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?User\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run$'
	TerminalRunOnceStr		= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?User\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce$'
	TerminalRunOnceExStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?User\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx$'
	TerminalRunOnceEx1Str	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?User\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Terminal Server\\\\Install\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001$'
								
	TitleValueStr			= 'Title'
	FlagsValueStr			= 'Flags'
	
	def _LookForRunKeys(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		
		OpenMatches		= self._LookForPattern(content, self.OpenKeyPattern)
		
		RegistryMatches = list(dict.fromkeys(CreateMatches + OpenMatches))
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
					      
		RunMatches			= [m for m in RegistryMatches if re.match(self.RunKeysRunStr, m) != None]
		RunOnceMatches		= [m for m in RegistryMatches if re.match(self.RunKeysRunOnceStr, m) != None]
		RunOnceExMatches	= [m for m in RegistryMatches if re.match(self.RunKeysRunOnceExStr, m) != None]
		RunOnceEx1Matches	= [m for m in RegistryMatches if re.match(self.RunKeysRunOnceEx1Str, m) != None]
		
		TrRunMatches		= [m for m in RegistryMatches if re.match(self.TerminalRunStr, m) != None]
		TrRunOnceMatches	= [m for m in RegistryMatches if re.match(self.TerminalRunOnceStr, m) != None]
		TrRunOnceExMatches	= [m for m in RegistryMatches if re.match(self.TerminalRunOnceExStr, m) != None]
		TrRunOnceEx1Matches	= [m for m in RegistryMatches if re.match(self.TerminalRunOnceEx1Str, m) != None]
		
		ValuesPresent 	= self.TitleValueStr in SetValueMatches and \
					      self.FlagsValueStr in SetValueMatches
		
		Run 		= bool(RunMatches)
		RunOnce 	= bool(RunOnceMatches)
		RunOnceEx	= bool(RunOnceExMatches) and bool(RunOnceEx1Matches) and ValuesPresent
					  
		TrRun		= bool(TrRunMatches)
		TrRunOnce	= bool(TrRunOnceMatches)
		TrRunOnceEx	= bool(TrRunOnceExMatches) and bool(TrRunOnceEx1Matches) and ValuesPresent
		
		return (Run, RunOnce, RunOnceEx, TrRun, TrRunOnce, TrRunOnceEx)
		
		
			#---------------------------------------#
			#			 Startup Folder				#
			#---------------------------------------#
			
	StartupUserStr		= 'C:\\\\Users\\\\{username}\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\'
	StartupAllStr		= 'C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\'
	
	def _LookForStartupFolder(self, content):
	
		Users = list(dict.fromkeys(self._LookForPattern(content, self.UserPattern)))
		UserStartupFolders = [self.StartupUserStr.format(username=u) for u in Users]
		
		CreateMatches 	= self._LookForPattern(content, self.CreateFilePattern)
		CreateMatches	= [self._DeletePattern(m, self.DirCleanPattern) for m in CreateMatches]
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		if CreateMatches:
			Dirs , Files = zip(*CreateMatches)
		else:
			Dirs , Files = (), ()
		
		StartupFolderCurUsr = any(item in Dirs for item in UserStartupFolders)
		StartupFolderAllUsr = self.StartupAllStr in Dirs
		
		return (StartupFolderCurUsr, StartupFolderAllUsr)
	
	
			#---------------------------------------#
			#			Scheduled Tasks				#
			#---------------------------------------#
			
	ScheduledTasksStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\Taskcache\\\\Tree\\\\$'
	
	def _LookForSchTasks(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		
		Tasks = [t for (r, t) in CreateMatches if re.match(self.ScheduledTasksStr, r) != None]
		
		return bool(Tasks)
		
		
			#---------------------------------------#
			#				Services				#
			#---------------------------------------#
			
	ServicesStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?System\\\\CurrentControlSet\\\\Services\\\\$'
	
	def _LookForServices(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		
		Services = [s for (r, s) in CreateMatches if re.match(self.ServicesStr, r) != None]
		
		return bool(Services)
		
		
	
		#################################################
		#		     System Behavior Abuse				#
		#################################################
		
		
			#---------------------------------------#
			#			  Active Setup				#
			#---------------------------------------#
			
	ActiveSetupStr		= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?(?:Machine|User)\\\\)?Software\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\$'
	StubPathValueStr 	= 'StubPath'
		
	def _LookForActiveSetup(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		
		if CreateMatches:
			RootRg , LastRg = zip(*CreateMatches)
		else:
			RootRg , LastRg = (), ()
			
		RegistryMatches = [m for m in RootRg if re.match(self.ActiveSetupStr, m) != None]		
			
		GUIDs			= [l for l in LastRg if self._MatchPattern(l, self.GUIDPattern)]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		ActiveSetup = bool(RegistryMatches) and bool(GUIDs) and \
					  self.StubPathValueStr in SetValueMatches
		
		return ActiveSetup
		
			
			#---------------------------------------#
			#			 	 AppInit				#
			#---------------------------------------#
	
	AppInit32Str		= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows$'
	AppInit64Str		= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows$'
	AppInitDLLsStr		= 'AppInit_DLLs'
	LoadAppInitDLLsStr	= 'LoadAppInit_DLLs'
	
	def _LookForAppInit(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		
		OpenMatches		= self._LookForPattern(content, self.OpenKeyPattern)
		
		RegistryMatches	= list(dict.fromkeys(CreateMatches + OpenMatches))
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		ValuesPresent	= self.AppInitDLLsStr in SetValueMatches and \
						  self.LoadAppInitDLLsStr in SetValueMatches
						  
		AppInit32Matches = [m for m in RegistryMatches if re.match(self.AppInit32Str, m) != None]
		AppInit64Matches = [m for m in RegistryMatches if re.match(self.AppInit64Str, m) != None]
					  
		AppInit32		= bool(AppInit32Matches) and ValuesPresent
		AppInit64		= bool(AppInit64Matches) and ValuesPresent
	
		return (AppInit32, AppInit64)
	
	
			#---------------------------------------#
			#			 	 Winlogon				#
			#---------------------------------------#
			
	WinlogonStr			= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\(?:Wow6432Node\\\\)?Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon$'
	UserinitValueStr	= 'Userinit'
	ShellValueStr		= 'Shell'
	
	def _LookForWinlogon(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		
		OpenMatches		= self._LookForPattern(content, self.OpenKeyPattern)
		
		RegistryMatches = list(dict.fromkeys(CreateMatches + OpenMatches))
		RegistryMatches = [m for m in RegistryMatches if re.match(self.WinlogonStr, m) != None]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		WinlogonUsrinit = bool(RegistryMatches) and self.UserinitValueStr in SetValueMatches
	
		WinlogonShell	= bool(RegistryMatches) and self.ShellValueStr in SetValueMatches
						   
		return (WinlogonUsrinit, WinlogonShell)
	
	
	
		#################################################
		#		       Program Loader Abuse				#
		#################################################
		
		
			#---------------------------------------#
			#		  Shortcut Manipulation			#
			#---------------------------------------#
		
	def _LookForShotcutManipulation(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateFilePattern)
		CreateMatches	= [self._DeletePattern(m, self.DirCleanPattern) for m in CreateMatches]
		CreateMatches	= [self._DeletePattern(m, self.DiskCleanPattern) for m in CreateMatches]
		CreateMatches	= [m for m in CreateMatches if os.path.splitext(m)[1] == '.lnk']
		
		CreateMatches = list(dict.fromkeys(CreateMatches))
		
		ReadMatches 	= self._LookForPattern(content, self.ReadFilePattern)
		ReadMatches		= [self._DeletePattern(m, self.DirCleanPattern) for m in ReadMatches]
		ReadMatches		= [self._DeletePattern(m, self.DiskCleanPattern) for m in ReadMatches]
		ReadMatches		= [m for m in ReadMatches if os.path.splitext(m)[1] == '.lnk']
		
		ReadMatches = list(dict.fromkeys(ReadMatches))
		
		WriteMatches 	= self._LookForPattern(content, self.WriteFilePattern)
		WriteMatches	= [self._DeletePattern(m, self.DirCleanPattern) for m in WriteMatches]
		WriteMatches	= [self._DeletePattern(m, self.DiskCleanPattern) for m in WriteMatches]
		WriteMatches	= [m for m in WriteMatches if os.path.splitext(m)[1] == '.lnk']
		
		WriteMatches = list(dict.fromkeys(WriteMatches))
		
		QueryInfMatches	= self._LookForPattern(content, self.QueryInfFilePattern)
		QueryInfMatches	= [self._DeletePattern(m, self.DirCleanPattern) for m in QueryInfMatches]
		QueryInfMatches	= [self._DeletePattern(m, self.DiskCleanPattern) for m in QueryInfMatches]
		QueryInfMatches	= [m for m in QueryInfMatches if os.path.splitext(m)[1] == '.lnk']
		
		QueryInfMatches = list(dict.fromkeys(QueryInfMatches))
		
		QueryAttMatches = self._LookForPattern(content, self.QueryAttFilePattern)
		QueryAttMatches	= [self._DeletePattern(m, self.DirCleanPattern) for m in QueryAttMatches]
		QueryAttMatches	= [self._DeletePattern(m, self.DiskCleanPattern) for m in QueryAttMatches]
		QueryAttMatches	= [m for m in QueryAttMatches if os.path.splitext(m)[1] == '.lnk']
		
		QueryAttMatches = list(dict.fromkeys(QueryAttMatches))
		
		ShortcutManipulation = False
		
		while (not ShortcutManipulation) and CreateMatches:
		
			f = CreateMatches.pop(0)
			
			ShortcutManipulation = 	f in ReadMatches and f in WriteMatches and \
									f in QueryInfMatches and f in QueryAttMatches
	
		return ShortcutManipulation
		
		
			#---------------------------------------#
			#	  Image File Execution Options		#
			#---------------------------------------#
			
	ImgFileExecOptsStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\(?:Wow6432Node\\\\)?Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\$'
	DebuggerValueStr	= 'Debugger'
	
	def _LookForImageFileExecOptions(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CreateMatches	= [m.groups() for m in CreateMatches if m]
		
		OpenMatches 	= self._LookForPattern(content, self.OpenKeyPattern)
		OpenMatches		= [self._MatchPattern(m, self.RootPattern) for m in OpenMatches]
		OpenMatches		= [m.groups() for m in OpenMatches if m]
		
		if CreateMatches:
			CreateRootRegs 	, CreateProgRegs = zip(*CreateMatches)
		else:
			CreateRootRegs 	, CreateProgRegs = (), ()
			
		if OpenMatches:
			OpenRootRegs 	, OpenProgRegs 	 = zip(*OpenMatches)
		else:
			OpenRootRegs 	, OpenProgRegs 	 = (), ()
			
		RootRegistries	= list(dict.fromkeys(list(CreateRootRegs) + list(OpenRootRegs)))
		RootMatches		= [m for m in RootRegistries if re.match(self.ImgFileExecOptsStr, m) != None]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		ImgFileExecOpts = bool(RootMatches) and self.DebuggerValueStr in SetValueMatches

		return ImgFileExecOpts
		
		
			#---------------------------------------#
			#	  		   COM Hijacking			#
			#---------------------------------------#
			
	COMHijackingStr	= r'^(?i)(?:\\\\)?(?:(?:(?:Registry\\\\)?(?:Machine|User)\\\\)?Software\\\\Classes\\\\)?CLSID\\\\\{[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}\}\\\\InProcServer32$'
	
	def _LookForCOMHijacking(self, content):
	
		OpenMatches 	= self._LookForPattern(content, self.OpenKeyProcPattern)
		
		if OpenMatches:
			Processes, Regs = zip(*OpenMatches)
		else:
			Processes, Regs = (), ()
		
		Processes 		= [self._MatchPattern(p, self.RootPattern) for p in Processes]
		Processes		= [p.group(2) for p in Processes]
		
		OpenMatches		= list(zip(Processes, Regs))
		
		Regmatches		= [(p,r) for (p,r) in OpenMatches if re.match(self.COMHijackingStr, r) != None and not p in self.CommonProcesses]

		return bool(Regmatches)
		
		
			#---------------------------------------#
			#	  		   Shim Database			#
			#---------------------------------------#
			
	InstalledSDBStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\InstalledSDB\\\\{[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}\}$'
	CustomSDBStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Custom\\\\$'
	
	DatabasePathStr = 'DatabasePath'
	
	def _LookForShimDatabase(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		
		InstallMatches	= [m for m in CreateMatches if re.match(self.InstalledSDBStr, m) != None]
		
		CustomMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateMatches]
		CustomMatches	= [m.group(1) for m in CustomMatches if m]
		CustomMatches	= [m for m in CustomMatches if re.match(self.CustomSDBStr, m) != None]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		return bool(InstallMatches) and bool(CustomMatches) and \
				self.DatabasePathStr in SetValueMatches 
				
			
			#---------------------------------------#
			#	  	   Extension Hijacking			#
			#---------------------------------------#
			
	ExtHijackingStr	= r'^(?i)(?:\\\\)?\w+\\\\shell\\\\open\\\\command$'
			
	def _LookForExtensionHijacking(self, content):
	
		OpenMatches 	= self._LookForPattern(content, self.OpenKeyPattern)
		OpenMatches		= [m for m in OpenMatches if re.match(self.ExtHijackingStr, m) != None]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		PointerMatches	= [m for m in SetValueMatches if re.match(self.PointerPattern, m) != None]
		
		return bool(OpenMatches) and bool(PointerMatches)
		
		
	
		#################################################
		#		        Aplication Abuse				#
		#################################################
		
			
			#---------------------------------------#
			#	  	 Browser Helper Objects			#
			#---------------------------------------#
			
	BrowHelpObjStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?Machine\\\\)?Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Browser Helper Objects\\\\{[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}\}$'
			
	def _LookForBrowserHelperObjects(self, content):
	
		CreateMatches 	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateMatches	= [m for m in CreateMatches if re.match(self.BrowHelpObjStr, m) != None]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		PointerMatches	= [m for m in SetValueMatches if re.match(self.PointerPattern, m) != None]

		return bool(CreateMatches) and bool(PointerMatches)

			
			#---------------------------------------#
			#	  	   	  Office Addins				#
			#---------------------------------------#
			
	OfficeAddinsStr	= r'^(?i)(?:\\\\)?(?:(?:Registry\\\\)?(?:Machine|User)\\\\)?Software\\\\Microsoft\\\\Office\\\\\w+\\\\Addins\\\\$'
	
	AddinDllStr		= r'^(?i)C:\\\\Program Files\\\\Microsoft Office\\\\Office[0-9]+\\\\Addins\\\\$'
	
	LoadBehaviorStr = 'LoadBehavior'
			
	def _LookForOfficeAddins(self, content):
	
		CreateRgMatches	= self._LookForPattern(content, self.CreateKeyPattern)
		CreateRgMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateRgMatches]
		CreateRgMatches	= [m.groups() for m in CreateRgMatches if m]
		
		if CreateRgMatches:
			RootRegs, _ 	= zip(*CreateRgMatches)
		else:
			RootRegs		= ()
		
		RegMatches		= [r for r in RootRegs if re.match(self.OfficeAddinsStr, r) != None]
		
		SetValueMatches = self._LookForPattern(content, self.SetValueKeyPattern)
		
		CreateFlMatches = self._LookForPattern(content, self.CreateFilePattern)
		CreateFlMatches	= [self._DeletePattern(m, self.DirCleanPattern) for m in CreateFlMatches]
		CreateFlMatches	= [self._MatchPattern(m, self.RootPattern) for m in CreateFlMatches]
		CreateFlMatches	= [m.groups() for m in CreateFlMatches if m]
		CreateFlMatches	= [f for (d, f) in CreateFlMatches if re.match(self.AddinDllStr, d) != None and os.path.splitext(f)[1] == '.dll']
		
		return bool(RegMatches) and self.LoadBehaviorStr in SetValueMatches and bool(CreateFlMatches)
