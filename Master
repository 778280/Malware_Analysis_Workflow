#!/usr/bin/python3.8

# Workflow components imports
from Orchestrator import Orchestrator

# Utility imports
import argparse
import time
import sys
import os

# RPC comunication imports
import xmlrpc.server as srv
import xmlrpc.client as cli

#########################################################
#														#
#					Master Class						#
#														#
#########################################################

class MasterService:

	def __init__(self, owDir, samDir, resDir, remAnalysis, remLabeling, hashes=[]):
	
		self.RemoteAnalysis = remAnalysis
		self.RemoteLabeling = remLabeling
		
		self.Orchestrator = Orchestrator(owDir, samDir, resDir,
							 remoteAnalysis=remAnalysis, remoteLabeling=remLabeling)
	
	
	def RequestFile(self, path):
	
		if os.path.exists(path):
	
			f = open(path, 'rb')
			
			return f.read()
			
		return None
		
		
	def AddAnalysisWorker(self, ip=None, port=None):
	
		addr = ip + ':' + port if self.RemoteAnalysis else None
		ID = self.Orchestrator.addAnalysisWorker(addr)
		
		return ID
	
	
	def DelAnalysisWorker(self, ID):
	
		return self.Orchestrator.delAnalysisWorker(ID)
		
		
	def GetAnalysisWorkers(self):
	
		return self.Orchestrator.getAnalysisWorkers()
	
	
	def AnalysisHeartbeat(self, ID):
	
		self.Orchestrator.registerAnalysisWorkerHeartbeat(ID)
		
	
	def AddLabelingWorker(self, ip=None, port=None):

		addr = ip + ':' + port if self.RemoteLabeling else None
		ID = self.Orchestrator.addLabelingWorker(addr)
		
		return ID
		

	def DelLabelingWorker(self, ID):
	
		return self.Orchestrator.delLabelingWorker(ID)
		
	
	def GetLabelingWorkers(self):
	
		return self.Orchestrator.getLabelingWorkers()
	
	
	def LabelingHeartbeat(self, ID):
	
		self.Orchestrator.registerLabelingWorkerHeartbeat(ID)
	
	
	def Stop(self):
	
		self.Orchestrator.stop()
	
	
#########################################################
#														#
#						Main Code						#
#														#
#########################################################

def main(args):

	if(args.remoteAnalysis or args.remoteLabeling):
	
		print("Master - worker arch")
		Local = False
		
		if(args.ip==None or args.port==None):
			print("When in this mode addr parameter must be specified as: --ip IP --port PORT")
			exit(1)
			
	else:
	
		print("Standalone arch")
		Local = True
		
	analyzedSamples = [os.path.splitext(zipName)[0] for zipName in os.listdir(args.resultsDir)]	
		
	master = MasterService(args.overwatchDir, args.samplesDir, args.resultsDir,
							args.remoteAnalysis, args.remoteLabeling, analyzedSamples)
	
	try:				
		if Local:
				
			master.AddAnalysisWorker()
			master.AddLabelingWorker()
			
			while(True):
				
				AnalysisWorkers = master.GetAnalysisWorkers()
				LabelingWorkers = master.GetLabelingWorkers()
				
				if not AnalysisWorkers: master.AddAnalysisWorker()
				if not LabelingWorkers: master.AddLabelingWorker()
				
				time.sleep(120)
			
		else:
		
			if not args.remoteAnalysis: master.AddAnalysisWorker()
			if not args.remoteLabeling: master.AddLabelingWorker()
		
			with srv.SimpleXMLRPCServer((args.ip, args.port), allow_none=True) as server:
		
				print("Serving")
			
				server.register_instance(master)
				server.register_introspection_functions()
				server.serve_forever()
				
				
	except KeyboardInterrupt:
		
		time.sleep(10)
		print("\nKeyboard interrupt received, exiting.")
		master.Stop()
		sys.exit(0)			
	

#########################################################
#														#
#					Argument Parsing					#
#														#
#########################################################


if __name__ == "__main__":

	parser = argparse.ArgumentParser(description="Act as master for the workflow")
	parser.add_argument("--overwatchDir", help="Directory in which to place samples to be automaticly recognized and sent to analyze", required=True)
	parser.add_argument("--samplesDir", help="Directory in which to temporarily store the queued samples", required=True)
	parser.add_argument("--resultsDir", help="Directory in which to store the analysis and labeling results along with the sample", required=True)
	parser.add_argument("--ip", help="Address in which to serve remote petitions", required=False, default=None)
	parser.add_argument("--port", help="Port in which to serve remote petitions", required=False, default=None, type=int)
	parser.add_argument("--remoteAnalysis", help="Analysis performed remotely", action="store_true", required=False)
	parser.add_argument("--remoteLabeling", help="Labeling performed remotely", action="store_true", required=False)
	
	args = parser.parse_args()

	main(args)
