#################################################################
#																#
# -Project:		Prevalence of Types of ASEPs in Windows malware #
# -File:		Orchestrator.py									#
# -Author:		Carlos Borau Gonz√°lez | NIP: 778280				#
# -Description: Malware sample analysis workflow orchestrator	#
#					responsible for the coordination among the  #
#					multiple processes invlolved in this task:	#
#					-Sample Digestion							#
#					-Sample Submission for Analysis				#
#					-Analysis Logs Gathering					#
#					-Analysis Logs Parsing and Sample Labeling	#
#					-Analysis Logs, Results and Sample Storing	#
#																#
#################################################################

# Workflow components imports
from Digester 	import Digester
from Analyzer 	import Analyzer,	AnalyzerMode
from Labeler	import Labeler,		LabelerMode

# Utility imports



from multiprocessing import Process, Value, Manager

# RPC comunication imports
import xmlrpc.server as srv
import xmlrpc.client as cli

class Orchestrator:

	
	def __init__(self, overwatch_directory, samples_directory, results_directory,
	 processed_hashes=[], remoteAnalysis=False, remoteLabeling=True):
	
		self.AnalyzerMode = AnalyzerMode.Remote if remoteAnalysis else AnalyzerMode.Local
		self.LabelerMode  = LabelerMode.Remote  if remoteLabeling else LabelerMode.Local
		
		self.Digester = Digester(overwatch_directory, samples_directory, processed_hashes)
		self.Digester.start(60)
		
		self.ResourceManager = Manager()
		self.AnalysisWorkers = self.ResourceManager.dict()
		self.AnalysisWorkersID = Value('i', 0)
		self.LabelingWorkers = self.ResourceManager.dict()
		self.LabelingWorkersID = Value('i', 0)
		self.AvailableLogs = self.ResourceManager.Queue()
		
	def stop(self):
	
		self.Digester.stop()
		
		self.SamplesToAnalyze 	= []
		self.SamplesToLabel		= []
		
		for worker in self.AnalysisWorkers:
			self.SamplesToAnalyze.append(self.delAnalysisWorker(worker))
			
		for worker in self.LabelingWorkers:
			self.SamplesToLabel.append(self.delLabelingWorker(worker))
			
			
	#########################################################
	#														#
	#					Analysis Workers					#
	#														#
	#########################################################
			
	def analysisWorkerProcess(self, ID, addr):
	
		if(self.AnalyzerMode == AnalyzerMode.Local):
			analyzer = Analyzer(AnalyzerMode.Local)
		else:
			analyzer = cli.ServerProxy('http://{0}'.format(addr))
		
		(_, sample, finished) = self.AnalysisWorkers[ID]
		
		while(not finished):

			# TODO Interact with analyzer
			
			# TODO Get Log and put it in the log queue
		
			print(sample)
		
		
	def addAnalysisWorker(self, ip=None, port=None):
	
		if(self.AnalyzerMode == AnalyzerMode.Local):
		
			# New local process
			ID = self.AnalysisWorkersID
			self.AnalysisWorkersID += 1
			addr = None
			sample = self.Digester.getSample()
			
		else:
		
			ID = ip
			addr = ip + ':' + port
			
			if(self.AnalysisWorkers.get(ip) != None): 
			
				# Fallen worker reconnects before heartbeat detection
				sample = delAnalysisWorker(ID)
				
			else:
			
				# New worker connection
				sample = self.Digester.getSample()
		
		p = Process(target=self.analysisWorkerProcess, args=(ID,addr))
		p.start()
		self.AnalysisWorkers[ID] = (p, sample, False)
	
	
	def delAnalysisWorker(self, ID):
	
		(p, sample, _) = self.AnalysisWorkers[ID]
		self.AnalysisWorkers[ID] = (p, sample, True)
		p.join()
		
		return sample
	
	
	#########################################################
	#														#
	#					Labeling Workers					#
	#														#
	#########################################################
	
	def labelingWorkerProcess(self, ID, addr):
		
		if(self.LabelerMode == LabelerMode.Local):
			labeler = Labeler(LabelerMode.Local)
		else:
			labeler = cli.ServerProxy('http://{0}'.format(addr))
		
		(_, log, finished) = self.LabelingWorkers[ID]
		
		while(not finished):

			# TODO Interact with labeler
			
			# TODO Get Result and save sample
		
			print(sample)
	
	
	def addLabelingWorker(self, ip=None, port=None):
	
		if(self.LabelerMode == LabelerMode.Local):
		
			# New local process
			ID = self.LabelingWorkersID
			self.LabelingWorkersID += 1
			addr = None
			log = self.AvailableLogs.get()
			
		else:
			
			ID = ip
			addr = ip + ':' + port
			
			if(self.LabelingWorkers.get(ip) != None): 
			
				# Fallen worker reconnects before heartbeat detection
				log = self.delLabelingWorker(ID)
			
			else:
				
				# New worker connection
				log = self.AvailableLogs.get()
		
		p = Process(target=self.labelingWorkerProcess, args=(ID,addr))
		p.start()
		self.LabelingWorkers[ID] = (p, log, False)
	
	
	def delLabelingWorker(self, ID):
	
		(p, log, _) = self.LabelingWorkers[ID]
		self.LabelingWorkers[ID] = (p, log, True)
		p.join()
		
		return log
	
	
	
